name: Backend Test and Deployment

on:
  push:
    branches:
      - main
    paths:
      - "fastapi_project/**"
      - ".github/workflows/backend-deployment-test.yaml"
  pull_request:
    branches:
      - develop
    paths:
      - "fastapi_project/**"
  workflow_dispatch:

# Add concurrency to cancel redundant builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: chatbot-backend-test
  REGION: us-east1
  REPOSITORY: chatbot-test-containers

jobs:
  build-and-push:
    name: Build and Push Docker Image
    # needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    env:
      APP_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Only fetch what's needed for faster checkout
          fetch-depth: 1

      - name: Clear Docker Cache
        run: docker buildx prune --force

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          # Enable more aggressive caching
          buildkitd-flags: "--debug --allow-insecure-entitlement security.insecure"
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          install_components: "beta"

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}
          tags: |
            type=sha,format=short

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./fastapi_project
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          # Enhanced caching options
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          # Optimize build with buildx flags
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            APP_ENV=${{ env.APP_ENV }}
          platforms: linux/amd64
          # Use parallel processing where possible
          provenance: false

  deploy:
    name: Deploy to Cloud Run
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Use the optimized Cloud Run deployment action
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: |
            --ingress=all
            --allow-unauthenticated
            --session-affinity
            --service-account=${{ vars.BACKEND_SERVICE_ACCOUNT }}           
            --cpu=1
            --memory=1Gi
            --min-instances=1
            --max-instances=3
          env_vars: |
            APP_ENV=test
            GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
            GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}
            GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
            GOOGLE_LOCATION=${{ env.REGION }}
            HF_TOKEN=${{ secrets.HF_TOKEN }}
            DEBUG=false
            DEPLOYED_URL=${{ steps.deploy.outputs.url }}
            BACKEND_CORS_ORIGINS=http://34.102.180.65:80
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Display the deployment URL
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
