name: Backend Test and Deployment

on:
  push:
    branches:
      - develop
    paths:
      - "django_ninja_project/**"
      - ".github/workflows/backend-deployment-test.yaml"
  pull_request:
    branches:
      - develop
    paths:
      - "django_ninja_project/**"
  workflow_dispatch:

# Add concurrency to cancel redundant builds
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: medwebapp-backend-container-test
  REGION: us-east1
  REPOSITORY: medaiwebapp-test-containers

jobs:
  # test:
  #   name: Test Backend
  #   runs-on: ubuntu-latest

  #   env:
  #     DJANGO_SETTINGS_MODULE: config.settings.test
  #     GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  #     # Keep environment variables for Cloud SQL connection
  #     DB_NAME: ${{ secrets.TEST_DB_NAME }}
  #     DB_USER: ${{ secrets.TEST_DB_USER }}
  #     DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
  #     DB_HOST: ${{ secrets.TEST_DB_HOST }}
  #     DB_PORT: ${{ secrets.DB_PORT || '5432' }}

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10"
  #         cache: "pip"

  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         version: 1.7.1

  #     - name: Cache Poetry dependencies
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.cache/pypoetry
  #         key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-poetry-

  #     - name: Install dependencies
  #       run: |
  #         cd django_ninja_project
  #         poetry install --no-interaction

  #     - name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v1
  #       with:
  #         credentials_json: ${{ secrets.GCP_SA_KEY }}

  #     # - name: Run tests
  #     #   working-directory: django_ninja_project
  #     #   run: |
  #     #     poetry run python manage.py test

  # lint:
  #   name: Lint Backend
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.10"

  #     - name: Install Poetry
  #       uses: snok/install-poetry@v1
  #       with:
  #         version: 1.7.1

  #     - name: Install dependencies
  #       run: |
  #         cd django_ninja_project
  #         poetry install --no-interactionn

  #     # - name: Run black
  #     #   working-directory: django_ninja_project
  #     #   run: |
  #     #     poetry run black --check .

  #     - name: Run isort
  #       working-directory: django_ninja_project
  #       run: |
  #         poetry run isort --check-only --profile black .

  #     - name: Run flake8
  #       working-directory: django_ninja_project
  #       run: |
  #         poetry run flake8

  build-and-push:
    name: Build and Push Docker Image
    # needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    env:
      DJANGO_SETTINGS_MODULE: config.settings.test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Only fetch what's needed for faster checkout
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          # Enable more aggressive caching
          buildkitd-flags: "--debug --allow-insecure-entitlement security.insecure"
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          install_components: "beta"

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}
          tags: |
            type=sha,format=short

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./django_ninja_project
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          # Enhanced caching options
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max
          # Optimize build with buildx flags
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DJANGO_SETTINGS_MODULE=${{ env.DJANGO_SETTINGS_MODULE }}
          platforms: linux/amd64
          # Use parallel processing where possible
          provenance: false
          push-args: |
            --compress

  deploy:
    name: Deploy to Cloud Run
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Use the optimized Cloud Run deployment action
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: |
            --ingress=all
            --allow-unauthenticated
            --vpc-connector=${{ vars.test_vpc_connector_name}}
            --session-affinity
            --service-account=${{ vars.BACKEND_SERVICE_ACCOUNT }}           
            --cpu=1
            --memory=1Gi
            --min-instances=1
            --max-instances=3
          env_vars: |
            DJANGO_SETTINGS_MODULE=config.settings.test
            GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
            ENVIRONMENT=test
            ENABLE_SILK=true
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Display the deployment URL
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
